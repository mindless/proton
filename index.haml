%header
  %h1 Hyde

  %p.brief
    Hyde is the cleanest way to create static sites for any occassion.

%section.details
  -#%aside
    %h3 Perfect for:
    %ul
      %li Static websites
      %li HTML prototypes
      %li Blogs
      %li Project documentation


-# ================================================================================ 

%nav.aspects
  %a.active{:href => '#premise'} Premise
  %a{:href => '#build'} Build
  %a{:href => '#layout'} Layouts
  %a{:href => '#partials'} Partials
  %a{:href => '#helpers'} Helpers
  %a{:href => '#install'} Install

-# ================================================================================ 

%section.code.p1#premise
  %h2
    Code in any language,
    %em not just HTML...

  %div.list
    %ul
      %li foo.textile
      %li index.haml
      %li css/style.scss
      %li images/background.png
      %span.notch

    .caption
      %h4 Imagine your HTML project looked like this.
      -#%p Take a folder with files in any supported template format.

  %div
    %h3.file foo.textile
    %pre.prettyprint.lang-textile
      :escaped
        h1(hello). Hello from Hyde
        via textile!

        Lorem *ipsum* dolor sit amet, 
        consecteteur...
      %span.notch

    .caption 
      %h4 Textile/Markdown support
      :markdown
        Write articles in simple shorthand with [Textile](1) or [Markdown](2).
        This will be magically converted to HTML.

        [1]: http://www.textism.com/tools/textile/
        [2]: http://daringfireball.net/projects/markdown/syntax

  %div
    %h3.file index.haml

    %pre.prettyprint.lang-ruby
      :escaped
        %div.article
          %h1
            Hello from Hyde via HAML!
          %p
            Lorem ipsum dolor sit
            amet, consecteteur...
      %span.notch

    .caption
      %h4 Supervalid HTML via HAML
      :markdown
        Write your HTML in terse, error-resistant [HAML](1).
        HAML lets you generate HTML files from a simpler
        syntax.

        [1]: http://haml-lang.com

  %div
    %h3.file css/style.scss
    %pre.prettyprint.lang-css
      :escaped
        $red: #833;

        .article {
          h1 { color: $red; }
          p  { line-height: 1.5; }
        }
      %span.notch

    .caption
      %h4 Painless CSS
      :markdown
        You can use variables, nested rules, mixins,
        and other conveniences in your CSS files!
        Powered by [Sass CSS](1).

        [1]: http://sass-lang.com

  %br
  %a.edge{:href => '#build'}
    %span.arrow!= "&darr;"
    %strong Build it


-# ================================================================================ 

%section.code.p2.hide#build
  %h2 ...and Hyde will build it for you.

  %div.info
    %code $ hyde build
  %br
  %br
  %br

  %div.list
    %ul
      %li _output/foo.html
      %li _output/index.html
      %li _output/css/style.css
      %li _output/images/background.png
      %span.notch

    .caption
      :markdown
        **After typing `hyde build`,** Hyde will
        create the output folder for you. Anything
        that's not supported is simply copied over.

  %div
    %h3.file _output/foo.html
    %pre.prettyprint.lang-html
      :escaped
        <div class='article'>
          <h1>Hello from Hyde via Textile!</h1>
          <p>Lorem <em>ipsum</em> dolor sit amet, consecteteur...</p>
        </div>
      %span.notch

    .caption
      :markdown
        **Hyde automatically guesses file extensions.**
        Textile files, for instance, become `.html` files...
  
  %div
    %h3.file _output/css/style.css
    %pre.prettyprint.lang-css
      :escaped
        .article h1 {
          color: #833; }

        .article p {
          line-height: 1.5; }
      %span.notch

    .caption
      :markdown
        **...and SCSS files** become `.css`. You may specify your own
        extensions if need be.

  %div.info
    %p.brief
      :markdown
        **Hyde works by taking a folder with files** in any template format
        (Markdown, HAML, etc), and magically creating the output files
        (HTML, CSS, etc) for you.

    %p Hyde takes this folder of files and crunches them.

  %br
  %a.edge{:href => '#build'}
    %span.arrow!= "&darr;"
    %strong Add layouts

-# ================================================================================ 

%section.code.p3.hide#layout
  %h2
    %em Adios, copy-paste.
    Hello, dynamic layouts.
  -# (You can even define per-page layouts, nested layouts, in any template language.)

  %div.info
    %p.brief
      :markdown
        **Never repeat yourself again** by creating layouts.
        You can even make these in HAML
        or any supported template language!

  %div
    %h3.file _layouts/default.html

    %pre.prettyprint.lang-html
      :escaped
        <html>
          <head>
            <title><%= page.title %></title>
          </head>
          <body>
      .highlight= "    <%= yield %>"
      :escaped
          </body>
        </html>
      %span.notch

    .caption
      %h4 Step 1: Define a layout
      :markdown
        Create a layout in `_layouts/default.html`.

  .plus
    %span= "+"

  %div
    %h3.file index.html
    %pre.prettyprint.lang-html
      :escaped
        title: Hello world!
        ---
      .highlight= "<h1>Welcome!</h1>"
      .highlight= "<p>This is my page.</p>"
      %span.notch

    .caption
      %h4 Step 2: Create a page
      Now your files will all use it.

  -#.equals
    %span!= "&rarr;"

  %div.info
    %p.brief
      :markdown
        **Your HTML files don't have to contain it** and
        Hyde will put them all together for you.
        You may even define data in your HTML.

  %br
  %br

  %div.wide.tall
    %h3.file _output/index.html
    %pre.prettyprint.lang-html
      :escaped
        <html>
          <head>
            <title>Hello world!</title>
          </head>
          <body>
            <div id='container'>
      .highlight= "        <h1>Welcome!</h1>"
      .highlight= "        <p>This is my page.</p>"
      :escaped
            </div>
          </body>
        </html>
    
    .caption
      %h4 Gasp in amazement
      :markdown
        Hyde will automatically put them together for you!

-# ================================================================================ 

%section.code.p5.hide#partials
  %h2 Partials
  %div
    %h3.file index.erb
    %pre
      :escaped
        <%= partial :'post_author', 
            name: "Christian Troy" %>
      %span.notch

    .caption 
      :markdown
        **Snippets getting repetitive?**
        You may put stuff into "partials" that
        you can use without repeating the code.
  
  .plus!= "+"

  %div
    %h3.file _layouts/post_author.erb
    %pre
      :escaped
        <p class='colophon'>
          This is post was written
          by <%= post_author %>.
        </p>
  
    .caption 
      :markdown
        **Simply define partials here.**

  .equals!= "&rarr;"

  %div
    %h3.file _output/index.html
    %pre
      :escaped
        <p class='colophon'>
          This is post was written
          by Christian Troy.
        </p>

-# ================================================================================ 

%section.code.p6.hide#helpers
  %h2 Helpers

  %div
    %h3 _extensions/helpers/helpers.rb
  
    %pre.ruby
      :escaped
         module Hyde::Helpers
           def date_format(date)
             date.strftime('%Y/%m/%d')
           end
         end

    .caption
      Hyde supports extensions where you can add arbitrary functionality
      to your site. You may define helpers by adding an extension to
      your site.
      
  .plus!= "+"

  %div
    %h3 index.erb
  
    %pre.html
      :escaped
        <footer>
          Generated on <%= date_format(Time.now) %>.
        </footer>
  
  .equals!= "&rarr;"

  %div
    %h3 _output/index.html
  
    %pre.html
      :escaped
        <footer>
          Generated on 2006/04/12.
        </footer>

-# ================================================================================ 

%section.code.p7.hide#install

  %h2 Installation

  %div.info
    %code
      $ gem install hydeweb
      $ hyde



