%header
  %h1 Hyde

  %p.brief
    Hyde is the cleanest way to create static sites for any occassion.

  %p
    Hyde solves the common problems plaguing
    %br
    creating sites.
    Here's how:

  -#%aside
    %h3 Perfect for:
    %ul
      %li Static websites
      %li HTML prototypes
      %li Blogs
      %li Project documentation


-# ================================================================================ 

-#%nav.aspects
  %a.active{:href => '#premise'} Premise
  %a{:href => '#build'} Build
  %a{:href => '#layout'} Layouts
  %a{:href => '#partials'} Partials
  -#%a{:href => '#helpers'} Helpers
  %a{:href => '#install'} Install

-# ================================================================================ 

%section.code.p3#layout
  %h2
    %em Adios, copy-paste.
    %br
    Hello, dynamic layouts.
  -# (You can even define per-page layouts, nested layouts, in any template language.)

  %br
  %br

  %div.list
    %ul.files
      %li.folder ./
      %li.l2.folder _layouts/
      %li.l3 default.html
      %li.l2 index.html
      %li.l2 about_us.html
      %span.notch

    .caption
      %h4 Imagine your HTML project looked like this.
      -#%p Take a folder with files in any supported template format.

  %div.high
    %h3.file _layouts/default.html

    %pre.prettyprint.lang-html
      :escaped
        <html>
          <head>
            <title>
              <%= meta.title %>
            </title>
          </head>
          <body>
      .highlight= "    <%= yield %>"
      :escaped
          </body>
        </html>
      %span.notch

    .caption
      %h4 Step 1: Define a layout
      :markdown
        Create a layout in `_layouts/default.html`.

  -#.plus
    %span= "+"

  %div
    %h3.file index.html
    %pre.prettyprint.lang-html
      :escaped
        title: Hello world!
        ---
      .highlight= "<h1>Welcome!</h1>"
      .highlight= "<p>This is my page.</p>"
      %span.notch

    .caption
      %h4 Step 2: Create a page
      Now your files will all use it.

  -#.equals
    %span!= "&rarr;"

  %div.info
    %h4
      When updating an entire site's footer,
      you just have to edit one file instead of 200.

    %p.brief
      :markdown

        Never repeat yourself again by creating layouts.
        Just create a layout page, and use the tag
        **&lt;%=&nbsp;yield&nbsp;%&gt;**
        to mark where the content should go.

  %br
  %br

  %div.wide.tall
    %h3.file _output/index.html
    %pre.prettyprint.lang-html
      :escaped
        <html>
          <head>
            <title>Hello world!</title>
          </head>
          <body>
            <div id='container'>
      .highlight= "        <h1>Welcome!</h1>"
      .highlight= "        <p>This is my page.</p>"
      :escaped
            </div>
          </body>
        </html>
    
    .caption
      %h4 Hyde will automatically put them together for you!
      :markdown
        Notice how the layout's
        **&lt;%=&nbsp;meta.title&nbsp;%&gt;** tag pulled what's in
        the **title: Hello world!** line. You can define
        metadata in your files.
        

-# ================================================================================ 

%section.code#how
  %h2
    How it works:

  %ul.steps
    %li Take your files
    %li Type this in a terminal
    %li Hyde makes a packaged folder for you

  %br
  %div.files.from
    %ul
      %li.folder _layouts
      %li.file about_us.html
      %li.file.nl index.html
      %li.file contact_us.html

  %div.terminal
    %code
      hyde build

  %div.files.output
    %ul
      %li.folder _output

  %br
  %div.info
    %h4 Clean, no fuzz
    There is nothing to install in your server.
    Just install Hyde in your local machine.
    It generates normal HTML/CSS files that
    will work anywhere.

  %div.info
    %h4 Packed up and good to go!
    :markdown
      Once you have your output folder, simply
      upload it to a server, send it to your client,
      whatever&mdash;it's ready to work.

-# ================================================================================ 

%section.code.p1#premise
  %h2
    Code in any language,
    %em not just HTML...

  %div.list
    %ul.files
      %li.folder ./
      %li.l2 foo.textile
      %li.l2 index.haml
      %li.l2 style.scss
      %li.l2 background.png
      %span.notch

    .caption
      %h4 Imagine your HTML project looked like this.
      -#%p Take a folder with files in any supported template format.

  %div
    %h3.file foo.textile
    %pre.prettyprint.lang-textile
      :escaped
        h1(hello). Hello from Hyde
        via textile!

        Lorem *ipsum* dolor sit amet, 
        consecteteur...
      %span.notch

    .caption 
      %h4 Textile/Markdown support
      :markdown
        Write articles in simple shorthand with [Textile][1] or [Markdown][2].
        This will be magically converted to HTML.

        [1]: http://www.textism.com/tools/textile/
        [2]: http://daringfireball.net/projects/markdown/syntax

  %div
    %h3.file index.haml

    %pre.prettyprint.lang-ruby
      :escaped
        %div.article
          %h1
            Hello from Hyde via HAML!
          %p
            Lorem ipsum dolor sit
            amet, consecteteur...
      %span.notch

    .caption
      %h4 Supervalid HTML via HAML
      :markdown
        Write your HTML in terse, error-resistant [HAML][1].
        HAML lets you generate HTML files from a simpler
        syntax.

        [1]: http://haml-lang.com

  %div
    %h3.file css/style.scss
    %pre.prettyprint.lang-css
      :escaped
        $red: #833;

        .article {
          h1 { color: $red; }
          p  { line-height: 1.5; }
        }
      %span.notch

    .caption
      %h4 Painless CSS
      :markdown
        You can use variables, nested rules, mixins,
        and other conveniences in your CSS files!
        Powered by [Sass CSS][1].

        [1]: http://sass-lang.com

  %br
  %a.edge{:href => '#build'}
    %span.arrow!= "&darr;"
    %strong Build it


-# ================================================================================ 

%section.code.p2#build
  %h2 ...and Hyde will build it for you.

  %div.info.wide
    %code $ hyde build

  %br
  %br
  %br

  %div.list
    %ul.files
      %li.folder ./
      %li.l2.new.folder _output/
      %li.l3.new foo.html
      %li.l3.new index.html
      %li.l3.new style.css
      %li.l3.new background.png
      %li.l2 foo.textile
      %li.l2 index.haml
      %li.l2 style.scss
      %li.l2 background.png
      %span.notch

    .caption
      :markdown
        **After typing `hyde build`,** Hyde will
        create the output folder for you. Anything
        that's not supported is simply copied over.

  %div
    %h3.file _output/foo.html
    %pre.prettyprint.lang-html
      :escaped
        <div class='article'>
          <h1>Hello from Hyde via Textile!</h1>
          <p>Lorem <em>ipsum</em> dolor sit amet, consecteteur...</p>
        </div>
      %span.notch

    .caption
      :markdown
        **Hyde automatically guesses file extensions.**
        Textile files, for instance, become `.html` files...
  
  %div
    %h3.file _output/style.css
    %pre.prettyprint.lang-css
      :escaped
        .article h1 {
          color: #833; }

        .article p {
          line-height: 1.5; }
      %span.notch

    .caption
      :markdown
        **...and SCSS files** become `.css`. You may specify your own
        extensions if need be.

  %div.info
    %p.brief
      :markdown
        **Hyde works by taking a folder with files** in any template format
        (Markdown, HAML, etc), and magically creating the output files
        (HTML, CSS, etc) for you.

    %p Hyde takes this folder of files and crunches them.

  %br

  %div.wide.convert
    -#.brief
      %h4 Freedom!
      = "...yes, this is all in addition to writing in plain HTML and CSS!"
      = "This means you have the freedom to write in any language you want."

    .brief
      %h2 Why this is awesome:
    %h4 Write articles in lightweight markup.
    %p
      You may write your pages with the simple markup styles of
      Markdown, and let Hyde take care of converting it to HTML for you.
      It will even apply layouts to it.
    %table
      %tr
        %td.from
          %ul
            %li Textile
            %li Markdown
        %td.arrow!= "&rarr;"
        %td.to HTML
    %h4 Build templates with templating languages.
    :markdown
      You can take advantage of the beautiful syntax of HAML
      in your sites.

      [1]: http://haml-lang.com
    %table
      %tr
        %td.from
          %ul
            %li HAML
            %li Liquid
            %li Radius
            %li ERB
        %td.arrow!= "&rarr;"
        %td.to HTML
    %h4 Supercharge your CSS.
    :markdown
      Ever wanted to have nested CSS rules? Variables? Mixins?
      Now you can do these with static sites.

      [1]: http://sass-lang.com
    %table
      %tr
        %td.from
          %ul
            %li Sass
            %li SCSS
            %li Less
        %td.arrow!= "&rarr;"
        %td.to CSS
    %p And finally...

    %h4 Write in plain HTML if you so wish.
    %p
      Yes, all these benefits are optional!


-# ================================================================================ 

%section.code#why
  %h2
    These are 2 ways Hyde can help you.
    %br
    %em There are more.

  %br
  %br

  %div.info
    %h4 Partials
    Lorem upsum dolor sit amet socentoteur adipicising elit. Sed do eiusmod tem
    por incidudunt nma posture magna aliqua.
    
    %h4 Extensions
    Lorem upsum dolor sit amet socentoteur adipicising elit. Sed do eiusmod tem
    por incidudunt nma posture magna aliqua.

  %div.info
    %h4 Helpers
    Lorem upsum dolor sit amet socentoteur adipicising elit. Sed do eiusmod tem
    por incidudunt nma posture magna aliqua.

    %h4 World peace
    Lorem upsum dolor sit amet socentoteur adipicising elit. Sed do eiusmod tem
    por incidudunt nma posture magna aliqua.

-# ================================================================================ 

%section.code.hide#partials
  %h2 Partials
  %div
    %h3.file index.erb
    %pre
      :escaped
        <%= partial :'post_author', 
            name: "Christian Troy" %>
      %span.notch

    .caption 
      :markdown
        **Snippets getting repetitive?**
        You may put stuff into "partials" that
        you can use without repeating the code.
  
  .plus!= "+"

  %div
    %h3.file _layouts/post_author.erb
    %pre
      :escaped
        <p class='colophon'>
          This is post was written
          by <%= post_author %>.
        </p>
  
    .caption 
      :markdown
        **Simply define partials here.**

  .equals!= "&rarr;"

  %div
    %h3.file _output/index.html
    %pre
      :escaped
        <p class='colophon'>
          This is post was written
          by Christian Troy.
        </p>

-# ================================================================================ 

%section.code.p6.hide#helpers
  %h2 Helpers

  %div
    %h3 _extensions/helpers/helpers.rb
  
    %pre.ruby
      :escaped
         module Hyde::Helpers
           def date_format(date)
             date.strftime('%Y/%m/%d')
           end
         end

    .caption
      Hyde supports extensions where you can add arbitrary functionality
      to your site. You may define helpers by adding an extension to
      your site.
      
  .plus!= "+"

  %div
    %h3 index.erb
  
    %pre.html
      :escaped
        <footer>
          Generated on <%= date_format(Time.now) %>.
        </footer>
  
  .equals!= "&rarr;"

  %div
    %h3 _output/index.html
  
    %pre.html
      :escaped
        <footer>
          Generated on 2006/04/12.
        </footer>

-# ================================================================================ 

%section.code.p7#install

  %h2 Installation

  %div.info
    %code
      $ gem install hydeweb
      $ hyde



